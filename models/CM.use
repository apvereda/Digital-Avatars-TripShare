model Reputation

class DigitalAvatar 
    end

----------------------------------------------------
-- ADDED
-- abstract class UncertainElement
--   attributes
--     confidence:SBoolean init: true
-- end

----------------------------------------------------
-- ADDED the inheritance relationship
abstract class DigitalAvatarRecord -- < UncertainElement
    attributes
        lastModification: Integer init: Clock.allInstances->any(true).now
        readPrivacy: PrivacyLevel init: #public
        writePrivacy: PrivacyLevel init: #public
end

----------------------------------------------------
-- ADDED
abstract class TrustOpinion < DigitalAvatarRecord
    attributes
        expirationDate : Integer init: -1
        trust : SBoolean init:SBoolean(0.8,0.0,0.2,0.5)
    end

class FunctionalTrust < TrustOpinion
end

class ReferralTrust < TrustOpinion
end
----------------------------------------------------

class ContactGroup < DigitalAvatarRecord
   end

class PersonalInfo < DigitalAvatarRecord
    attributes
        contactDA:DigitalAvatar
        name: String
        phone: String
        address: String
        email: String
    end

abstract class Trip < DigitalAvatarRecord
    attributes 
        origin : Real -- They were coordinates x and y, but we could have only 1 dimension and make it easier to manage
        destination : Real
        tripDate : Integer
    end

class TripProposal < Trip
    attributes
        accepted:Boolean init:false
    end

class TripRequest < Trip
    attributes
        maxDistance : Real init: 20 --km
        maxWaitingTime : Integer init: 60 --value
end

association Proposal between 
    TripProposal [*]
    DigitalAvatar [1] role proponent
end

association Request between 
    TripRequest [*]
    DigitalAvatar [1] role requestor
end

association ProposalToRequest between 
    TripProposal [*]
    TripRequest [0..1] 
end 

----------------------------------------------------
-- class Application
-- end

abstract class Application 
    end

----------------------------------------------------
-- ADDED TrustApplication between LocalTripShareApp y Application
abstract class TrustApplication < Application
    operations
        directFunctionalTrust(truster:PersonalInfo,trustee:PersonalInfo):SBoolean =
            let f:TrustOpinion = self.opinion->select(o|o.oclIsTypeOf(FunctionalTrust) and o.truster=truster and o.trustee=trustee)->any(true) in
            if f=null then null -- SBoolean(0,0,1,0.5) -- vacuous opinion
            else if (f.expirationDate<>-1) and (f.expirationDate < self.da.clock.now) then null -- SBoolean(0,0,1,0.5) -- vacuous opinion
                else f.trust
                endif
            endif
        directReferralTrust(truster:PersonalInfo,trustee:PersonalInfo):SBoolean =
            let f:TrustOpinion = self.opinion->select(o|o.oclIsTypeOf(ReferralTrust) and o.truster=truster and o.trustee=trustee)->any(true) in
            if f=null then null -- SBoolean(0,0,1,0.5) -- vacuous opinion
            else if (f.expirationDate<>-1) and (f.expirationDate < self.da.clock.now) then null -- SBoolean(0,0,1,0.5) -- vacuous opinion
                else f.trust
                endif
            endif
        combinedFunctionalTrust(trustee:PersonalInfo):SBoolean = 
            let myFT : SBoolean = self.directFunctionalTrust(self.da.me,trustee) in 
            if myFT <>null then 
                myFT -- if I have a direct functional trust, I return this value
            else -- I need to see if I know people who trust that person
                let RT : Set(PersonalInfo) = -- set of contacts who have a functional trust about "trustee" in this app
                    self.opinion
                    ->select(o|o.oclIsTypeOf(FunctionalTrust) and o.trustee = trustee)
                    ->collect(o|o.truster)
                    -- from those, I select those for which I also have a referral trust
                    ->select(c| self.directReferralTrust(self.da.me,c)<>null) 
                    ->asSet() in
                if RT->isEmpty then SBoolean(0,0,1,0.5) -- no idea about that person
                else
                    let opinions:Sequence(SBoolean) = 
                        RT->iterate(c ; s:Sequence(SBoolean) = Sequence{} | 
                          s->append(self.directFunctionalTrust(c,trustee).discount(Sequence{self.directReferralTrust(self.da.me,c)}))) in
                    let f:SBoolean = opinions->first() in
                    let Q:Sequence(SBoolean) = opinions->excluding(f) in
                    if Q->isEmpty then f 
                    else f.aleatoryCumulativeBeliefFusion(Q) -- f.consensusAndCompromiseFusion(Q) 
                    endif 
                endif
            endif  
end

class TripShareApp < TrustApplication
  operations
    newTripProposal(tr:TripRequest):TripProposal 
      begin
        declare p:TripProposal;
        -- decide here depending on the distance, time, etc.
        -- in this version we agree with all proposals
        p:=new TripProposal();
        p.origin := tr.origin;
        p.destination := tr.destination;
        p.tripDate:=tr.tripDate;
        insert(self.da, p) into Records;
        insert(p, self.da) into Proposal;
        result:=p;
      end
    newTripRequest(origin:Real, dest:Real, date:Integer, mxD : Real, mxT : Integer)
      begin
        declare r:TripRequest,p:TripProposal;
        r:=new TripRequest();
        r.origin := origin;
        r.destination := dest;
        r.tripDate:=date;
        r.maxDistance := mxD;
        r.maxWaitingTime := mxT;
        insert(self.da, r) into Records;
        insert(r, self.da) into Request;
        for contact in self.da.records->select(d:DigitalAvatarRecord|d.oclIsTypeOf(PersonalInfo))
                                      ->collect(d|d.oclAsType(PersonalInfo).contactDA)
                                      ->asSet() do

           if contact.localApp->select(a|a.oclIsKindOf(TripShareApp))->notEmpty() and -- the contact also has the same application
               contact<>self.da then -- the contact is not me 
                p:=(contact.localApp->select(a |a.oclIsKindOf(TripShareApp))->any(true)).oclAsType(TripShareApp).newTripProposal(r);
                insert(p,r) into ProposalToRequest;
            end;
        end
      end
----------------------------------------------------
-- ADDED/REPLACED     
-- showCurrentOptions(tr:TripRequest):Sequence(TripProposal)
--        begin
--          result:= tr.tripProposal->asSequence()
--        end
--
    showCurrentOptions(tr:TripRequest):Sequence(Tuple(trust:SBoolean,proposal:TripProposal)) =
        tr.tripProposal->iterate(tp;acc:Sequence(Tuple(trust:SBoolean,proposal:TripProposal))=Sequence{} |
                acc->append(Tuple{trust=self.combinedFunctionalTrust(
                                                self.da.records->select(r|r.oclIsTypeOf(PersonalInfo))
                                                ->collect(r|r.oclAsType(PersonalInfo))
                                                ->asSet()
                                                ->select(r|r.contactDA=tp.proponent)
                                                ->any(true)),
                                  proposal=tp}))
----------------------------------------------------
    selectTripProposal(tp:TripProposal) : Boolean
      begin
        result:=(tp.proponent.localApp->select(a |a.oclIsKindOf(TripShareApp))->any(true)).oclAsType(TripShareApp).confirmTripProposal(tp);
      end
    confirmTripProposal(tp:TripProposal) : Boolean
      begin
        result:=true; -- in this implementation we always agree
      end

  end

----------------------------------------------------
enum PrivacyLevel {private, public, granted}

association ReadPrivacy between
   DigitalAvatarRecord [*] role read
   ContactGroup [*] role readGroups
end
association WritePrivacy between
   DigitalAvatarRecord [*] role write
   ContactGroup [*] role writeGroups
end

----------------------------------------------------
class Clock
    attributes
        now : Integer init:0
    operations
        tick(time:Integer)
            begin
                self.now := self.now + time;
            end
    end
----------------------------------------------------
-- ADDED Sscope, truster and Trustee
association Scope between
    TrustOpinion [*] role opinion
    TrustApplication [1] role scope
end
association Trustee between
    TrustOpinion [*] role othersOpinion
    PersonalInfo [1] role trustee
end
association Truster between
    TrustOpinion [*] role myOpinion
    PersonalInfo [1] role truster
end

----------------------------------------------------
association ContactGroups between
    ContactGroup [*] role group
    PersonalInfo [*] role person
end

composition Records between
    DigitalAvatar [1] role ownerDA
    DigitalAvatarRecord [*] role records
end

association Time between
    DigitalAvatar [*] role da
    Clock [1] role clock
end

association Applications between 
    DigitalAvatar [1] role da
    Application [*] role localApp
end

-- aggregation Deployment between
--     Application [1] role app
--     LocalApplication [1..*] role localApp
-- end

association MyDetails between
    DigitalAvatar [0..1] role da
    PersonalInfo [1] role me derive = self.records->select(oclIsTypeOf(PersonalInfo))->any(c|c.oclAsType(PersonalInfo).contactDA=self).oclAsType(PersonalInfo)
end

constraints
context DigitalAvatar inv MeInMyContacts:
    self.records->select(oclIsTypeOf(PersonalInfo))->one(c|c.oclAsType(PersonalInfo).contactDA=self)
-- context DigitalAvatar inv UniqueId:
--     DigitalAvatar.allInstances->isUnique(digitalAvatarId)

--context Application inv DifferentAvatars:
--    Application.allInstances->forAll(ap1,ap2|ap1<>ap2 implies (ap1.da=ap2.da implies ap1.name<>ap2.name))

-------------------------------------------------
-- ADDED the NoSelfOpinion Invariant
context TrustOpinion inv noSelfOpinion:
    self.truster<>self.trustee

context TrustOpinion inv NoDups:
    TrustOpinion.allInstances->forAll(t1,t2| (t1.truster=t2.truster and t1.trustee=t2.trustee) implies t1=t2)

